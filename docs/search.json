[
  {
    "objectID": "preparacion_curso.html",
    "href": "preparacion_curso.html",
    "title": "",
    "section": "",
    "text": "CódigoMostrar todo el códigoOcultar todo el códigoVer el código fuente\n\n\n\n\n\nInstalá R en la computadora que utilizarás durante el curso (https://cran.r-project.org/). Probablemente ya lo tenés instalado, pero intentá actualizarlo si tenés una versión de R &lt; 4.0.0. Podés encontrar qué versión de R tenés ejecutando esto en la consola de R:\n\n\n\nCódigo\nversion$version.string\n\n\n\nInstalá la interfaz de RStudio (https://www.rstudio.com/products/rstudio/download/, elejí la versión gratuita).\nAbrí RStudio y seleccioná la pestaña “Tools” y luego “Global options” (última opción). Seleccioná la opción “Code”, luego seleccioná la casilla de “Soft wrap”.\nTambién en Rstudio: Seleccioná la opción “Pane Layout” y mové “Source” al panel superior izquierdo y “Console” al panel superior derecho. Esta disposición asigna más espacio en la pantalla a los paneles más útiles. Dalé “Apply” y “Ok”. Para aquellos que no estén familiarizados con RStudio, “Source” es un editor de texto donde se escribe el código y donde guardas el código en un archivo físico (normalmente en formato .R) y la consola evalúa el código que se envia desde el “Source” e imprime los resultados (si los hay). Podés escribir código en la consola, pero no se guardará en un archivo físico.\nAhora en la consola de R en Rstudio ejecutá el siguiente código para instalar los paquetes que estaremos usando durante el curso:\n\n\n\nCódigo\n# cargar funcion del paquete \"sketchy\"\nsource(\n  paste0(\n    \"https://raw.githubusercontent.com/maRce10/\",\n    \"sketchy/main/R/load_packages.R\"\n  )\n)\n\n# instalar/ cargar paquetes\nload_packages(\n  packages = c(\n    \"remotes\",\n    \"leaflet\",\n    \"knitr\",\n    \"rmarkdown\",\n    \"kableExtra\",\n    \"RColorBrewer\",\n    \"ggplot2\",\n    \"rmdformats\",\n    \"viridis\",\n    \"revealjs\",\n    \"rticles\",\n    \"tufte\",\n    \"lme4\",\n    \"MASS\",\n    \"lmerTest\",\n    \"sjPlot\",\n    \"car\",\n    github = \"maRce10/sketchy\",\n    github = \"hadley/emo\"\n  )\n)\n\n\n\nCreá un proyecto para el curso corriendo este código:\n\n\n\nCódigo\nlibrary(sketchy)\n\nmake_compendium(\n  name = \"r_avanzado\",\n  path = \"DIRECTORIO_DONDE_HACER_EL_PROYECTO\",\n  Rproj = TRUE,\n  readme = TRUE\n)\n\n\n(en realidad este es tambien un compendio de investigación)\nAbrí el proyecto en Rstudio:\n\n\n\n\n\n\n\nEste proyecto debe usarse cada vez que se trabaja código del curso ✌️"
  },
  {
    "objectID": "reportes_dinamicos.html",
    "href": "reportes_dinamicos.html",
    "title": "Reportes dinámicos",
    "section": "",
    "text": "Familiarizarse con el formato para reportes dinámicos Rmarkdown/quarto\nSer capaz de documentar el manejo y análisis de datos en R usando Rmarkdown/quarto\nPaquetes a utilizar en este manual:\nCódigo\n# cargar paquetes\n\nsketchy::load_packages(\n    c(\n      \"leaflet\",\n      \"remotes\",\n      \"hadley/emo\",\n      \"maRce10/sketchy\",\n      \"knitr\",\n      \"rmarkdown\",\n      \"rmdformats\",\n      \"revealjs\",\n      \"rticles\",\n      \"tufte\"\n    )\n)"
  },
  {
    "objectID": "reportes_dinamicos.html#ventajas-de-los-reportes-dinámicos-con-rmarkdownquarto",
    "href": "reportes_dinamicos.html#ventajas-de-los-reportes-dinámicos-con-rmarkdownquarto",
    "title": "Reportes dinámicos",
    "section": "1.1 Ventajas de los reportes dinámicos con Rmarkdown/quarto:",
    "text": "1.1 Ventajas de los reportes dinámicos con Rmarkdown/quarto:\n\nEl código R se puede incrustar en el informe, por lo que no es necesario mantener el informe y el código de R por separado\nIncluir el código R directamente en un informe proporciona una estructura intuitiva para reproducir los análisis\nEl texto del informe está escrito como texto normal, por lo que no se requieren conocimientos de programación (i.e. R o HTML) para comprenderlos\nEl resultado es un archivo HTML que incluye imágenes, bloques de código con los comandos de R, los resultados de estos códigos y texto. No se necesitan archivos adicionales, todo está incorporado en el archivo HTML.\nLos informes son fáciles de compartir por correo o publicarlos en línea\nEstos informes facilitan la colaboración y mejoran la reproducibilidad (entender los análisis es mucho mas fácil cuando hay texto explicativo, código de R, los resultados del código y los gráficos en un mismo archivo)\nSe actualizan fácilmente para incluir nuevos análisis y/o integrar nuevos datos"
  },
  {
    "objectID": "reportes_dinamicos.html#ejercicio-1",
    "href": "reportes_dinamicos.html#ejercicio-1",
    "title": "Reportes dinámicos",
    "section": "2.1 Ejercicio 1",
    "text": "2.1 Ejercicio 1\nCree un nuevo archivo R Markdown o quarto, escriba algunas líneas de texto y haga clic en “Knit” para ver cómo se verá su reporte."
  },
  {
    "objectID": "reportes_dinamicos.html#crear-encabezados-de-varios-tamaños",
    "href": "reportes_dinamicos.html#crear-encabezados-de-varios-tamaños",
    "title": "Reportes dinámicos",
    "section": "3.1 Crear encabezados de varios tamaños",
    "text": "3.1 Crear encabezados de varios tamaños\nCódigo:\n\n\n\n\n\n\n\n\n\n\n\nResultado:"
  },
  {
    "objectID": "reportes_dinamicos.html#encabezado-2",
    "href": "reportes_dinamicos.html#encabezado-2",
    "title": "Reportes dinámicos",
    "section": "4.1 Encabezado 2",
    "text": "4.1 Encabezado 2\n\n4.1.1 Encabezado 3"
  },
  {
    "objectID": "reportes_dinamicos.html#opciones-del-texto",
    "href": "reportes_dinamicos.html#opciones-del-texto",
    "title": "Reportes dinámicos",
    "section": "4.2 Opciones del texto",
    "text": "4.2 Opciones del texto\n \nCódigo:\n\n\n\n\n\n\n\n\n\n\n\nResultado:\nHacer texto en negrita, itálico, tachado, o superíndice"
  },
  {
    "objectID": "reportes_dinamicos.html#añadir-una-imagen",
    "href": "reportes_dinamicos.html#añadir-una-imagen",
    "title": "Reportes dinámicos",
    "section": "4.3 Añadir una imagen",
    "text": "4.3 Añadir una imagen\nCódigo:\n\n\n\n\n\n\n\n\n\n\n\nResultado:\n\n\n\n\n\n\n\n\n\n\n\nTambién podemos añadir una imagen con la función include_graphics() del paquete knitr.\nCódigo:\n\n\nCódigo\ninclude_graphics(\"./images/rmarkdown_icon.png\")\n\n\nResultado:\n\n\n\n\n\n\n\n\n\n\n\nNote que esta opción nos permite hacer uso de los argumentos del bloque de código dedicados a la graficación, y po r tanto es una opción mas flexible."
  },
  {
    "objectID": "reportes_dinamicos.html#crear-enlaces-hyperlinks",
    "href": "reportes_dinamicos.html#crear-enlaces-hyperlinks",
    "title": "Reportes dinámicos",
    "section": "4.4 Crear enlaces (‘hyperlinks’)",
    "text": "4.4 Crear enlaces (‘hyperlinks’)\nCódigo:\n\n\n\n\n\n\n\n\n\n\n\nResultado:\nCrear un enlace a figshare"
  },
  {
    "objectID": "reportes_dinamicos.html#ejercicio-2",
    "href": "reportes_dinamicos.html#ejercicio-2",
    "title": "Reportes dinámicos",
    "section": "4.5 Ejercicio 2",
    "text": "4.5 Ejercicio 2\n2.1 Cree unos encabezados y sub-encabezados en su documento Rmarkdown\n2.2 Añada texto con algunas palabras en negrita y en italica\n2.3 Incruste una imagen de su organismo favorito (o un gif)\n2.4 Añada un enlace URL"
  },
  {
    "objectID": "reportes_dinamicos.html#incrustar-código",
    "href": "reportes_dinamicos.html#incrustar-código",
    "title": "Reportes dinámicos",
    "section": "4.6 Incrustar código",
    "text": "4.6 Incrustar código\nPara incrustar el código de R, tenemos que definir un área donde se encuentra el código. Esta ‘área’ se conoce como un bloque de código (o ‘chunk’) y se define mediante:\n\n\n\n\n\n\n\n\n\n\n\n \nObserve que el recuadro de R está en gris, mientras que el resto está en fondo blanco. Todo lo que se incluye en el segmento se evalúa y muestra de acuerdo con las especificaciones, aunque estas se pueden modificar.\n \nPodemos, por ejemplo, agregar una nueva columna al conjunto de datos de ejemplo de iris:\n\n\n\n\n\n\n\n\n\n\n\nResultado:\n\n\nCódigo\ndata(iris)\n\niris$random.var &lt;- rnorm(n = nrow(iris))\n\nhead(iris)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\nrandom.var\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n2.01977\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n0.24286\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n0.80896\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n-0.73165\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n0.07776\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n-1.09562\n\n\n\n\n\n\n \nCuando se procesa su documento, el segmento de código se muestra en un cuadro gris y los resultados de ese código se muestran en un cuadro blanco. ¿Qué pasa si solo desea que se muestre la salida de su código? ¿O que su código se muestre pero no se ejecute realmente? Hay argumentos que puede agregar a cada uno de sus bloques para especificar estas y otras opciones:"
  },
  {
    "objectID": "reportes_dinamicos.html#ocultar-código",
    "href": "reportes_dinamicos.html#ocultar-código",
    "title": "Reportes dinámicos",
    "section": "4.7 Ocultar código",
    "text": "4.7 Ocultar código\nAñadir el argumento echo=FALSE\nCódigo:\n\n\n\n\n\n\n\n\n\n\n\nResultado:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\nrandom.var\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n-0.46604\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n0.27565\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n1.01303\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n-0.84717\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n-0.00219\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n-0.92692\n\n\n\n\n\n\n \nPuede ver que el código está oculto pero se muestran los resultados.\nEsta guía sobre las opciones de los bloques de código puede ser muy útil:\n\n\n\n\n\n\n\n\n\n\n\n \nEn este enlace se detallan todos los argumentos disponibles para personalizar los bloques de código."
  },
  {
    "objectID": "reportes_dinamicos.html#incrustar-gráficos",
    "href": "reportes_dinamicos.html#incrustar-gráficos",
    "title": "Reportes dinámicos",
    "section": "4.8 Incrustar gráficos",
    "text": "4.8 Incrustar gráficos\nLos gráficos se pueden incrustar en documentos Rmarkdown simplemente usando funciones de graficación como lo haría en un script de R normal.\n\n4.8.0.1 Código:\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n4.8.0.2 Resultado:"
  },
  {
    "objectID": "reportes_dinamicos.html#ejercicio-3",
    "href": "reportes_dinamicos.html#ejercicio-3",
    "title": "Reportes dinámicos",
    "section": "4.9 Ejercicio 3",
    "text": "4.9 Ejercicio 3\n3.1 Utilice los argumentos eval, collapse con diferentes valores (TRUE o FALSE) en un segmento donde corre head(iris). ¿Cómo afectan el resultado?\n3.2 Haga lo mismo con los argumentos out.width, fig.width,dpi y fig.height en un segmento que cree un gráfico. ¿Cómo afecta esta vez?"
  },
  {
    "objectID": "reportes_dinamicos.html#incrustar-código-de-r-en-el-texto",
    "href": "reportes_dinamicos.html#incrustar-código-de-r-en-el-texto",
    "title": "Reportes dinámicos",
    "section": "4.10 Incrustar código de R en el texto",
    "text": "4.10 Incrustar código de R en el texto\nEs posible que haya notado a lo largo de este tutorial que tengo pequeños fragmentos de texto que parecen “bloques de código”. Esto se conoce como incrustación de código en texto.\nEsto se puede hacer de dos maneras:\n\n4.10.0.1 1.Dar un texto con la apariencia de un segmento de código:\n\n\n\n4.10.0.2 Código:\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n4.10.0.3 Resultado:\nEl promedio del largo del sépalo es mean(iris$Sepal.Length)\n \n\n\n4.10.0.4 2. Evaluar el código en el texto\n\n\n4.10.0.5 Código:\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.10.0.6 Resultado:\nEl promedio del largo de sépalo para setosa es 5.006."
  },
  {
    "objectID": "reportes_dinamicos.html#metadatos-yaml",
    "href": "reportes_dinamicos.html#metadatos-yaml",
    "title": "Reportes dinámicos",
    "section": "5.1 Metadatos (YAML)",
    "text": "5.1 Metadatos (YAML)\nHay tres componentes básicos de un documento de R Markdown: los metadatos, el texto y el código. Los metadatos se escriben entre el par de tres guiones (“- - -”) generalmente al inicio del documento. La sintaxis de los metadatos es YAML (YAML Ain’t Markup Language), por lo que a veces también se denomina metadatos YAML. La sangría es importante en YAML, así que debe añadirla a los subcampos (con respecto a un campo superior).\nEste encabezado muestra las opciones mas comúnmente usadas en los metadatos YAML:\n\n\nCódigo\n---\ntitle: \"Un titulo descriptivo y sin faltas ortograficas\"\nauthor: \"Marcelo Araya\"\ndate: \"`r Sys.Date()`\"\noutput: # Varios outputs mostrados solo para el ejemplo\n  html_document:\n    fig_caption: yes\n    number_sections: yes\n    toc: yes\n    toc_float: yes\n    df_print: paged\n---\n\n\nEn este enlace se explican en detalle las opciones disponibles en el encabezado YAML de archivos Rmarkdown."
  },
  {
    "objectID": "reportes_dinamicos.html#emojis",
    "href": "reportes_dinamicos.html#emojis",
    "title": "Reportes dinámicos",
    "section": "5.2 Emojis",
    "text": "5.2 Emojis\nEl paquete emo permite añadir emojis al evaluar un código:\n\nCódigo\nemo::ji(\"costa_rica\")\n\n🇨🇷\nTambien se puede incrustar en el texto 🇨🇷, como lo vimos mas arriba ⬆️ (ji(\"up_arrow\"))"
  },
  {
    "objectID": "reportes_dinamicos.html#cuadros-con-knitrkable",
    "href": "reportes_dinamicos.html#cuadros-con-knitrkable",
    "title": "Reportes dinámicos",
    "section": "5.3 Cuadros con knitr::kable",
    "text": "5.3 Cuadros con knitr::kable\nEl paquete knitr también provee una función para mostrar datos tabulares de forma ordenada y ‘limpia’ en los reportes dínamicos:\n\n\nCódigo\nknitr::kable(iris[1:10, ])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\nrandom.var\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n-0.46604\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n0.27565\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n1.01303\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n-0.84717\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n-0.00219\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n-0.92692\n\n\n4.6\n3.4\n1.4\n0.3\nsetosa\n-0.76836\n\n\n5.0\n3.4\n1.5\n0.2\nsetosa\n0.34991\n\n\n4.4\n2.9\n1.4\n0.2\nsetosa\n-0.67399\n\n\n4.9\n3.1\n1.5\n0.1\nsetosa\n0.48724\n\n\n\n\n\n\n \nEl paquete kableExtra complementa esta función con muchas herramientas para personalizar el formato de las tablas en reportes dinámicos en R."
  },
  {
    "objectID": "reportes_dinamicos.html#opciones-adicionales-en-knitr",
    "href": "reportes_dinamicos.html#opciones-adicionales-en-knitr",
    "title": "Reportes dinámicos",
    "section": "5.4 Opciones adicionales en knitr",
    "text": "5.4 Opciones adicionales en knitr\nEl argumento opts_knit de knitr permite definir opciones globales (aplicables a todos los bloques a menos que se re-definan):\n\n\nCódigo\nopts_chunk$set(root.dir = \"..\", eval = TRUE, echo = FALSE)"
  },
  {
    "objectID": "reportes_dinamicos.html#presentaciones-y-otros-opciones-de-formato",
    "href": "reportes_dinamicos.html#presentaciones-y-otros-opciones-de-formato",
    "title": "Reportes dinámicos",
    "section": "5.5 Presentaciones y otros opciones de formato",
    "text": "5.5 Presentaciones y otros opciones de formato\nNote en la ventana de creación de un nuevo documento Rmarkdown las opciones adicionales de formato:\n\n\n\n\n\n\n\n\n\n\n\n \nLos reportes dinámicos se pueden generar en otros formatos incluyendo presentaciones, pdf y documentos de word."
  },
  {
    "objectID": "reportes_dinamicos.html#plantillas-de-rmarkdown",
    "href": "reportes_dinamicos.html#plantillas-de-rmarkdown",
    "title": "Reportes dinámicos",
    "section": "5.6 Plantillas de Rmarkdown",
    "text": "5.6 Plantillas de Rmarkdown\nEl paquete Rmarkdown puede generar resultados en HTML, PDF, MS Word, viñetas de paquetes de R, presentaciones Beamer y HTML5. Los formatos adicionales (o ‘variantes’ de estos formatos) están disponibles en otros paquetes de R. Algunos de esos paquetes son:\n\nrmdformats\nreveljs\nartículos\ntufte\n\nUna vez estos paquetes han sido instalados, los nuevos formatos estarán disponibles a través del nuevo cuadro de diálogo Rmarkdown:"
  },
  {
    "objectID": "reportes_dinamicos.html#html-widgets",
    "href": "reportes_dinamicos.html#html-widgets",
    "title": "Reportes dinámicos",
    "section": "6.1 HTML widgets",
    "text": "6.1 HTML widgets\nLos HTML Widgets se implementan con el paquete R htmlwidgets, que conecta herramientas de JavaScript que crean aplicaciones interactivas, como gráficos y tablas Se han desarrollado varios paquetes que emplean HTML widgets como dygraphs, DT y leaflet. En este sitio (https://www.htmlwidgets.org) se muestran una variedad de widgets disponibles así como instrucciones de como desarrollarlos.\nEl siguiente código utiliza el paquete leaflet para generar un mapa interactivo:\n\nCódigo\nsketchy::load_packages(\"leaflet\")\n\nll_map &lt;- leaflet()\n\nll_map &lt;- addTiles(map = ll_map)\n\nll_map &lt;-\n  setView(\n    map = ll_map,\n    lat = 5.527448,\n    lng = -87.057245,\n    zoom = 13\n  )\n\naddPopups(\n  map = ll_map,\n  lat = 5.527448,\n  lng = -87.057245,\n  popup = 'Isla del Coco'\n)"
  },
  {
    "objectID": "reportes_dinamicos.html#aplicaciones-shiny",
    "href": "reportes_dinamicos.html#aplicaciones-shiny",
    "title": "Reportes dinámicos",
    "section": "6.2 Aplicaciones shiny",
    "text": "6.2 Aplicaciones shiny\nEl paquete shiny crea aplicaciones web interactivas en R. Para llamar al código shiny desde un documento R Markdown, agregue ‘runtime’: shiny a los metadatos YAML, como en este ejemplo:\n\n\nCódigo\n---\ntitle: \"Documento Shiny\"\noutput: html_document\nruntime: shiny\n---\n\n\n \nEl siguiente código crea una aplicación shiny dentro del documento Rmarkdown:\n\n\nCódigo\nsketchy::load_packages(\"shiny\")\n\nui &lt;- fluidPage(\n  \n  titlePanel(\"Ejemplo\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(inputId = \"bins\",\n                  label = \"Numero de barras:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n      \n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n \n  output$distPlot &lt;- renderPlot({\n    \n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    hist(x, breaks = bins, col = \"#3E4A89FF\", border = \"white\",\n         xlab = \"Tiempo de espera para la siguiente erupcion\",\n         main = \"Histograma del tiempo de espera\")\n  })\n}\n\n# Crear Shiny app\nshinyApp(ui = ui, server = server)\n\n\n \nNote que esta aplicación no funciona en documentos estáticos de Rmarkdown. En el sitio https://shiny.rstudio.com/gallery pueden encontrar muchos ejemplos de aplicaciones shiny. Estas aplicaciones son complejas de incluir en archivos auto-contenidos y por ello no son tan amigables para reportes dinámicos como los que podemos generar con R markdown."
  },
  {
    "objectID": "reportes_dinamicos.html#proyectos-de-rstudio",
    "href": "reportes_dinamicos.html#proyectos-de-rstudio",
    "title": "Reportes dinámicos",
    "section": "8.1 Proyectos de Rstudio",
    "text": "8.1 Proyectos de Rstudio\nLos proyectos de Rstudio crean carpetas donde se guardan los archivos relacionados a un análisis específico (código y datos) y hacen de esta carpeta el directorio de trabajo por defecto cuando se abre el proyecto. Se pueden crear de esta forma:\n\n\n\n\n\n\n\n\n\n\n\nLuego aparecera una seria de ventanas donde pueden escoger que tipo de proyecto y el nombre de este:"
  },
  {
    "objectID": "reportes_dinamicos.html#compendios-de-investigación",
    "href": "reportes_dinamicos.html#compendios-de-investigación",
    "title": "Reportes dinámicos",
    "section": "8.2 Compendios de investigación",
    "text": "8.2 Compendios de investigación\nLos compendios de investigación son estructuras de carpetas pre-definidas que permiten seguir un orden lógico e intuitivo para organizar los archivos usados y generados en un análisis de datos de un proyecto de investigación. El paquete sketchy genera estos compendios, permitiendo al usuario seleccionar entre una gama de compendios comunes en la comunidad científica. Este ejemplo crea el compendio básico (uno de los 14 que vienen con el paquete):\n\n\nCódigo\npath &lt;- tempdir()\n\nmake_compendium(\n  name = \"proyecto_x\",\n  path = path,\n  format = \"basic\",\n  Rproj = TRUE\n)\n\n\nCreating directories ...\nproyecto_x\n│   \n├── data/  \n│   ├── processed/  # modified/rearranged data\n│   └── raw/  # original data\n├── manuscript/  # manuscript/poster figures\n├── output/  # all non-data products of data analysis\n└── scripts/  # code\nDone.\n\n\nEl paquete crea archivos Rmarkdown con plantillas para el análisis de datos (carpeta “scripts”) y escritura de manuscritos (carpeta “manuscript”). Corra path en la consola de R para ver la dirección de la carpeta donde se creo el compendio."
  },
  {
    "objectID": "reportes_dinamicos.html#ejercicio-4",
    "href": "reportes_dinamicos.html#ejercicio-4",
    "title": "Reportes dinámicos",
    "section": "8.3 Ejercicio 4",
    "text": "8.3 Ejercicio 4\n\nCree un reporte dinámico que incluya un mapa dinámico de Costa Rica usando el paquete leaflet\nReproduzca alguno de los ejemplos disponibles en el sitio del paquete dygraphs (https://rstudio.github.io/dygraphs/) e incrústelo en su reporte dinámico\nInstale el paquete kableExtra y incruste en su reporte el códifo de ejemplo en la documentación de la función kable_styling() de ese paquete\nCree una presentación Rmarkdown utilizando la opción “Presentation” en la ventana de creación\nGenere un reporte dinámico en formato PDF\nCree un proyecto de Rstudio para organizar los contenidos del curso\nCree un compendio de investigación con sketchy"
  },
  {
    "objectID": "reportes_dinamicos.html#referencias",
    "href": "reportes_dinamicos.html#referencias",
    "title": "Reportes dinámicos",
    "section": "8.4 Referencias",
    "text": "8.4 Referencias\n\nR Markdown: The Definitive Guide\nRmarkdown custom format\nRmarkdown website\nJacolien van Rij: Rmarkdown variants\nDanielle Quinn: R Lessons\nVaidyanathan, Ramnath, Yihui Xie, JJ Allaire, Joe Cheng, and Kenton Russell. 2019. Htmlwidgets: HTML Widgets for R. https://github.com/ramnathv/htmlwidgets.\n\n\n\nInformación de la sesión\n\n\nR version 4.2.2 Patched (2022-11-10 r83330)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=es_ES.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=es_CR.UTF-8        LC_COLLATE=es_ES.UTF-8    \n [5] LC_MONETARY=es_CR.UTF-8    LC_MESSAGES=es_ES.UTF-8   \n [7] LC_PAPER=es_CR.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=es_CR.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] tufte_0.13       rticles_0.25     revealjs_0.9     rmdformats_1.0.4\n [5] rmarkdown_2.21   knitr_1.44       sketchy_1.0.2    emo_0.0.0.9000  \n [9] remotes_2.4.2.1  leaflet_2.1.1   \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.14     magrittr_2.0.3      timechange_0.2.0   \n [4] R6_2.5.1            rlang_1.1.1         fastmap_1.1.1      \n [7] stringr_1.5.0       tools_4.2.2         packrat_0.8.1      \n[10] xfun_0.40           cli_3.6.1           htmltools_0.5.6    \n[13] crosstalk_1.2.0     yaml_2.3.7          digest_0.6.33      \n[16] assertthat_0.2.1    lifecycle_1.0.3     bookdown_0.33      \n[19] crayon_1.5.2        purrr_1.0.2         vctrs_0.6.3        \n[22] htmlwidgets_1.5.4   glue_1.6.2          evaluate_0.22      \n[25] xaringanExtra_0.7.0 stringi_1.7.12      compiler_4.2.2     \n[28] generics_0.1.3      jsonlite_1.8.7      lubridate_1.9.2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programación y métodos estadísticos avanzados en R",
    "section": "",
    "text": "Escuela de Biología, Universidad de Costa Rica\n\n\nMarcelo Araya-Salas PhD y  Mario Espinoza PhD\n\nEste curso pretende profundizar en los elementos de programación computacional, manipulación de bases de datos, diseño experimental, graficación personalizada, y el uso de técnicas y modelaje estadístico avanzadas utilizando R como plataforma. El curso está dirigido a estudiantes avanzados de carrera, de licenciatura o postgrado. En el curso se pretende cubrir las bases de los principales análisis y técnicas de modelaje estadístico, así como análisis emergentes. Todas las semanas se realizarán prácticas de laboratorio en donde se aplicarán los conceptos desarrollados durante las clases de teoría. Además, durante el curso cada estudiante presentará un paquete o extensión (conjunto de herramientas aplicables a análisis específicos) de R, en donde profundizará sobre sus aplicaciones en el campo de la biología demostrando en clase en que consiste el análisis.\n \n\nObjetivos\n\nFamiliarizar al estudiante con la programación en R\nBrindar herramientas para la manipulación de bases de datos\nEmplear métodos de visualización de datos\nCubrir algunos de los análisis estadísticos tradicionales\nProveer a los estudiantes con experiencia en la aplicación de las herramientas brindadas por medio de prácticas y proyectos de investigación\n\n\n \n\nDinámica de las clases\n\nPueden hacer preguntas en cualquier momento\nSientanse libres de responder preguntas de compañeros\nTraten siempre de correr el código y de entender todos sus elementos\nLas líneas de código estan numeradas. Podemos usar esos números para referirnos a códigos específicos en los manuales. Los bloques de código también incluyen un botón que permite copiar el código:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTambién usaremos el enlace “Compartir código” en el menú principal de este sitio (arriba) para pasar códigos que se desarrollen en clase\n\n \n\nConsejos para garantizar el máximo aprovechamiento del curso\n \n\nAseguráte de tener todo lo que necesitas antes del comienzo de la clase\nTratá de estar preparado unos minutos antes del comienzo de la clase\nIntenta concentrarte al máximo en el curso, cierra otros programas o pestañas innecesarias del navegador de internet (por ejemplo, instagram, twitter, etc)\nComentá el código"
  },
  {
    "objectID": "respuestas_tarea5.html",
    "href": "respuestas_tarea5.html",
    "title": "Solución a la tarea 5",
    "section": "",
    "text": "Haga un bucle for que una todos los datos contenidos en los archivos de texto en un solo cuadro de datos (‘data frame’, debe llamarse ‘datos_camaras’) y añada una columna con el nombre del archivo de donde provienen los datos (debe llamarse ‘archivo’; pistas: 1) añadir el nombre del archivo en una columna se hace en el cuerpo del bucle luego de leer el archivo; 2) recuerden usar basename()).\n\nRespuesta:\n\n\nCódigo\n# crear un cuadro de datos vacios donde poner los resultados\ndatos_camaras &lt;- data.frame()\n\n# ciclar sobre los archivos para leer los datos\nfor(i in archivos_txt){\n  \n  # leer datos\n  txt &lt;- read.table(i, header = TRUE, skip = 4, sep = \"\\t\")\n  \n  # añadir nombre de archivo\n  txt$archivo &lt;- basename(i)\n  \n  # adjuntar datos\n  datos_camaras &lt;- rbind(datos_camaras, txt) \n}\n\n\n\nHaga un bucle sapply que devuelva el número de familias para cada archivo. El bucle debe usar los datos en el data frame ‘datos_camaras’ creado en el ejercicio 1 (no debe leer de nuevo los archivos de texto). El resultado debe ser guardado en un cuadro de datos (‘data frame’) que contenga las columnas ‘archivo’ y ‘n_familias’. (pistas: 1) necesitan crear una función en la llamada del bucle; 2) el bucle debe ciclar sobre cada uno de los nombres de archivo; 3) deben crear un subconjunto de los datos para cada archivo a lo interno del bucle). Las primeras 3 filas del cuadro de datos deben verse así:\n\n\n\n\n\n\n\n\n\n\n\narchivo\nn_familias\n\n\n\n\n2022-09-02_R3-LcamT3-RcamN4_Pel1_2021-09-24_MaxN.TXT\n19\n\n\n2022-09-03_S6-LB13-RB12_PuntaMariaOeste_2022-03-24_MaxN.TXT\n1\n\n\n2022-09-03_T4-LB19-RB18_PuntaMariaOeste_2022-03-24_MaxN.TXT\n2\n\n\n\n\n\n\nRespuesta:\n\n\nCódigo\n# ciclar sobre los nombres de archivos en datos_camaras$archivo\nn_familias &lt;- sapply(unique(datos_camaras$archivo), function(x){\n  \n  # leer datos de un archivo\n  Y &lt;- datos_camaras[datos_camaras$archivo == x, ]\n  \n  # estimar numero de familias\n  n_fams &lt;- length(unique(Y$Family))\n\n  return(n_fams)\n  })\n\n# guardar resultados en un cuadro de datos\ncam_dat &lt;- data.frame(archivo = basename(unique(datos_camaras$archivo)), n_familias = n_familias, row.names = 1:length(n_familias))\n\n\n\nHaga un bucle sapply que devuelva el número de géneros (columna ‘genus’) para cada archivo. El bucle debe usar los datos en el data frame ‘datos_camaras’ creado en el ejercicio 1 (no debe leer de nuevo los archivos de texto). El resultado debe ser añadido como una nueva columna al cuadro de datos creado en el ejercicio 2. Las primeras 3 filas del cuadro de datos deben verse así:\n\n\n\n\n\n\n\n\n\n\n\n\narchivo\nn_familias\nn_generos\n\n\n\n\n2022-09-02_R3-LcamT3-RcamN4_Pel1_2021-09-24_MaxN.TXT\n19\n32\n\n\n2022-09-03_S6-LB13-RB12_PuntaMariaOeste_2022-03-24_MaxN.TXT\n1\n1\n\n\n2022-09-03_T4-LB19-RB18_PuntaMariaOeste_2022-03-24_MaxN.TXT\n2\n2\n\n\n\n\n\n\nRespuesta:\n\n\nCódigo\n# ciclar sobre los nombres de archivos en datos_camaras$archivo\ncam_dat$n_generos &lt;- sapply(unique(datos_camaras$archivo), function(x){\n  \n   # leer datos de un archivo\n  Y &lt;- datos_camaras[datos_camaras$archivo == x, ]\n  \n  # estimar numero de generos\n  n_gens &lt;- length(unique(Y$Genus))\n\n  return(n_gens)\n  })\n\n\n\nHaga un bucle sapply que devuelva la fecha de creación del video para cada archivo. El bucle debe usar los datos en el data frame ‘datos_camaras’ creado en el ejercicio 1 (no debe leer de nuevo los archivos de texto). El resultado debe ser añadido como una nueva columna al cuadro de datos creado en el ejercicio 2. Las primeras 3 filas del cuadro de datos deben verse así:\n\n\n\n\n\n\n\n\n\n\n\n\n\narchivo\nn_familias\nn_generos\ndate\n\n\n\n\n2022-09-02_R3-LcamT3-RcamN4_Pel1_2021-09-24_MaxN.TXT\n19\n32\n1\n\n\n2022-09-03_S6-LB13-RB12_PuntaMariaOeste_2022-03-24_MaxN.TXT\n1\n1\n1\n\n\n2022-09-03_T4-LB19-RB18_PuntaMariaOeste_2022-03-24_MaxN.TXT\n2\n2\n1\n\n\n\n\n\n\nRespuesta:\n\n\nCódigo\n# ciclar sobre los nombres de archivos en datos_camaras$archivo\ncam_dat$date &lt;- sapply(unique(datos_camaras$archivo), function(x){\n   \n  # leer datos de un archivo\n  Y &lt;- datos_camaras[datos_camaras$archivo == x, ]\n  \n  # extraer fecha\n  date &lt;- length(unique(Y$Date))\n\n  return(date)\n  })\n\n\n\nHaga un bucle sapply que calcule el número de veces que se observó cada especie. El bucle debe trabajar sobre el data frame ‘datos_camaras’ creado en el ejercicio 1 (no debe leer de nuevo los archivos de texto) y el cálculo debe ser la suma de la columna ‘MaxN’. Ponga los resultados en un cuadro de datos con columnas para especie y número de observaciones. (pista: unique(datos_camaras$Species)). Remueva el campo en el que especie es igual a ““. Las primeras 3 filas del cuadro de datos deben verse así:\n\n\n\n\n\n\n\n\nspp\nn_obs\n\n\n\n\nxanthopterus\nxanthopterus\n145\n\n\nlaticlavius\nlaticlavius\n25\n\n\npolylepis\npolylepis\n26\n\n\n\n\n\n\nRespuesta:\n\n\nCódigo\n# ciclar sobre los nombres de archivos en datos_camaras$archivo\nn_obs &lt;- sapply(unique(datos_camaras$Species), function(x){\n  \n  # leer datos de un archivo  \n  X &lt;- datos_camaras[datos_camaras$Species == x, ]\n  \n  # sumar numero de observaciones\n  obs &lt;- sum(X$MaxN)\n  \n  return(obs)\n})\n\n\nsp_dat &lt;- data.frame(spp = unique(datos_camaras$Species), n_obs)\n\nsp_dat &lt;- sp_dat[sp_dat$spp != \"\", ]\n\n\n\nUtilice bucles sapply para añadir el mínimo y máximo de la profundidad para cada una de las especies en el cuadro de datos creado en el ejercicio anterior (pistas: 1) asegúrese que la columna de profundidad es numérica antes de calcular las profundidades; 2) gsub(\" m\", \"\", vector); 3) gsub(\",\", \".\", vector); 4) as.numeric()). Las primeras 3 filas del cuadro de datos deben verse así:\n\n\n\n\n\n\n\n\nspp\nn_obs\nmin_prof\nmax_prof\n\n\n\n\nxanthopterus\nxanthopterus\n145\n6.4\n31.6\n\n\nlaticlavius\nlaticlavius\n25\n9.6\n31.6\n\n\npolylepis\npolylepis\n26\n9.6\n30.0\n\n\n\n\n\n\nRespuesta:\n\n\nCódigo\n# convertir profundidad a una columna numerica\ndatos_camaras$Depth &lt;- gsub(\" m\", \"\", datos_camaras$Depth)\ndatos_camaras$Depth &lt;- gsub(\",\", \".\", datos_camaras$Depth)\ndatos_camaras$Depth &lt;- as.numeric(datos_camaras$Depth)\n\n# ciclar sobre los nombres de especies\nsp_dat$min_prof &lt;- sapply(sp_dat$spp, function(x){\n  \n  # leer los datos para una especie\n  X &lt;- datos_camaras[datos_camaras$Species == x, ]\n  \n  #  calcular el minimo de la profundidad\n  min_prf &lt;- min(X$Depth, na.rm = TRUE)\n  \n  return(min_prf)\n})\n\n# ciclar sobre los nombres de especies\nsp_dat$max_prof &lt;- sapply(sp_dat$spp, function(x){\n  \n  # leer los datos para una especie\n  X &lt;- datos_camaras[datos_camaras$Species == x, ]\n  \n  # calcular el maximo de profundidad\n  max_prf &lt;- max(X$Depth, na.rm = TRUE)\n  \n  return(max_prf)\n})\n\n\n\nCalcule el rango de profundidad (i.e. la diferencia entre el mínimo y el máximo de la profundidad) para cada especie y añádalo como una columna al cuadro de datos creado en el ejercicio 5. Las primeras 3 filas del cuadro de datos deben verse así:\n\n\n\n\n\n\n\n\nspp\nn_obs\nmin_prof\nmax_prof\nrango_prof\n\n\n\n\nxanthopterus\nxanthopterus\n145\n6.4\n31.6\n25.2\n\n\nlaticlavius\nlaticlavius\n25\n9.6\n31.6\n22.0\n\n\npolylepis\npolylepis\n26\n9.6\n30.0\n20.4\n\n\n\n\n\n\nRespuesta:\n\n\nCódigo\n# calcular el maximo menos el minimo de profundidad\nsp_dat$rango_prof &lt;- sp_dat$max_prof - sp_dat$min_prof\n\n\n\nIncluya el cuadro de datos generado en los ejercicios 5 a 7 como una tabla en su reporte usando la función DT del paquete datatable.\n\nRespuesta:\n\n\nCódigo\nlibrary(DT)\ndatatable(sp_dat)\n\n\n\n\n\n\n\nPublique el reporte en Rpubs y añada el enlace en el reporte (use un enlace en el texto)."
  },
  {
    "objectID": "respuestas_tarea5.html#información-de-la-sesión",
    "href": "respuestas_tarea5.html#información-de-la-sesión",
    "title": "Solución a la tarea 5",
    "section": "Información de la sesión",
    "text": "Información de la sesión\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=pt_BR.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=es_CR.UTF-8        LC_COLLATE=pt_BR.UTF-8    \n [5] LC_MONETARY=es_CR.UTF-8    LC_MESSAGES=pt_BR.UTF-8   \n [7] LC_PAPER=es_CR.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=es_CR.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/Costa_Rica\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] DT_0.30\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.33     R6_2.5.1          fastmap_1.1.1     xfun_0.41        \n [5] magrittr_2.0.3    cachem_1.0.8      knitr_1.45        htmltools_0.5.7  \n [9] rmarkdown_2.25    cli_3.6.1         sass_0.4.7        jquerylib_0.1.4  \n[13] compiler_4.3.1    rstudioapi_0.15.0 tools_4.3.1       ellipsis_0.3.2   \n[17] bslib_0.5.1       evaluate_0.23     yaml_2.3.7        rlang_1.1.2      \n[21] jsonlite_1.8.7    htmlwidgets_1.6.2 crosstalk_1.2.0"
  }
]